{"version":3,"file":"core.umd.js","sources":["~/@ngx-translate/core/index.ts","~/@ngx-translate/core/src/translate.pipe.ts","~/@ngx-translate/core/src/translate.directive.ts","~/@ngx-translate/core/src/translate.service.ts","~/@ngx-translate/core/src/translate.store.ts","~/@ngx-translate/core/src/translate.parser.ts","~/@ngx-translate/core/src/util.ts","~/@ngx-translate/core/src/translate.compiler.ts","~/@ngx-translate/core/src/missing-translation-handler.ts","~/@ngx-translate/core/src/translate.loader.ts"],"sourcesContent":["import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./src/translate.loader\";\nimport {TranslateService} from \"./src/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./src/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./src/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./src/translate.compiler\";\nimport {TranslateDirective} from \"./src/translate.directive\";\nimport {TranslatePipe} from \"./src/translate.pipe\";\nimport {TranslateStore} from \"./src/translate.store\";\nimport {USE_STORE} from \"./src/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./src/translate.service\";\n\nexport * from \"./src/translate.loader\";\nexport * from \"./src/translate.service\";\nexport * from \"./src/missing-translation-handler\";\nexport * from \"./src/translate.parser\";\nexport * from \"./src/translate.compiler\";\nexport * from \"./src/translate.directive\";\nexport * from \"./src/translate.pipe\";\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipe,\n        TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        TranslateDirective\n    ]\n})\nexport class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n}\n","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n    constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n    }\n\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n\n    transform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch(e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     */\n    _dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._dispose();\n    }\n}\n","import {Directive, ElementRef, AfterViewChecked, Input, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {equals, isDefined} from './util';\nimport {TranslateService, LangChangeEvent} from './translate.service';\nimport {TranslationChangeEvent} from \"./translate.service\";\nimport {DefaultLangChangeEvent} from \"./translate.service\";\n\n@Directive({\n    selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n    key: string;\n    lastParams: any;\n    currentParams: any;\n    onLangChangeSub: Subscription;\n    onDefaultLangChangeSub: Subscription;\n    onTranslationChangeSub: Subscription;\n\n    @Input() set translate(key: string) {\n        if(key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n\n    @Input() set translateParams(params: any) {\n        if(!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n\n    constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if(!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n\n    checkNodes(forceUpdate = false, translations?: any) {\n        let nodes: NodeList = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if(!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for(let i = 0; i < nodes.length; ++i) {\n            let node: any = nodes[i];\n            if(node.nodeType === 3) { // node type 3 is a text node\n                let key: string;\n                if(this.key) {\n                    key = this.key;\n                    if(forceUpdate) {\n                        node.lastKey = null;\n                    }\n                } else {\n                    let content = this.getContent(node).trim();\n                    if(content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if(content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        } else if(node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n\n    updateValue(key: string, node: any, translations: any) {\n        if(key) {\n            if(node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n\n            this.lastParams = this.currentParams;\n\n            let onTranslation = (res: string) => {\n                if(res !== key) {\n                    node.lastKey = key;\n                }\n                if(!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n\n            if(isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if(typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                } else {\n                    onTranslation(res);\n                }\n            } else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n\n    getContent(node: any): string {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n\n    setContent(node: any, content: string): void {\n        if(isDefined(node.textContent)) {\n            node.textContent = content;\n        } else {\n            node.data = content;\n        }\n    }\n\n    ngOnDestroy() {\n        if(this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n\n        if(this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n\n        if(this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport {concat, share, map, merge, switchMap, toArray, take} from \"rxjs/operators\"\nimport {of} from \"rxjs/observable/of\";\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams\n} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n    private loadingTranslations: Observable<any>;\n    private pending: boolean = false;\n    private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n    private _defaultLang: string;\n    private _currentLang: string;\n    private _langs: Array<string> = [];\n    private _translations: any = {};\n    private _translationRequests: any  = {};\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    get onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n\n    set defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    get currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n\n    set currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    get langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n\n    set langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    get translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n\n    set translations(translations: any) {\n        if(this.isolate) {\n            this._currentLang = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(public store: TranslateStore,\n                public currentLoader: TranslateLoader,\n                public compiler: TranslateCompiler,\n                public parser: TranslateParser,\n                public missingTranslationHandler: MissingTranslationHandler,\n                @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n                @Inject(USE_STORE) private isolate: boolean = false) {\n    }\n\n    /**\n     * Sets the default language to use as a fallback\n     * @param lang\n     */\n    public setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Gets the default language used\n     * @returns string\n     */\n    public getDefaultLang(): string {\n        return this.defaultLang;\n    }\n\n    /**\n     * Changes the lang currently used\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return of(this.translations[lang]);\n        }\n    }\n\n    /**\n     * Retrieves the given translations\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    private retrieveTranslations(lang: string): Observable<any> {\n        let pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n        this.loadingTranslations.pipe(take(1))\n          .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param lang\n     * @param translations\n     * @param shouldMerge\n     */\n    public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Returns an array of currently available langs\n     * @returns {any}\n     */\n    public getLangs(): Array<string> {\n        return this.langs;\n    }\n\n    /**\n     * @param langs\n     * Add available langs\n     */\n    public addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n\n    /**\n     * Update the list of available langs\n     */\n    private updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n\n    /**\n     * Returns the parsed result of the translations\n     * @param translations\n     * @param key\n     * @param interpolateParams\n     * @returns {any}\n     */\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let result: any = {},\n                observables: boolean = false;\n            for(let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let mergedObs: Observable<string>;\n                for(let k of key) {\n                    let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.pipe(merge(obs));\n                    }\n                }\n                return mergedObs.pipe(\n                  toArray(),\n                  map((arr: Array<string>) => {\n                    let obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                      obj[key[index]] = value;\n                    });\n                    return obj;\n                  })\n                );\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param key\n     * @param interpolateParams\n     * @returns {any} the translated key, or an object of translated keys\n     */\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(res, key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return of(res);\n            }\n        }\n    }\n\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param key\n     * @param interpolateParams\n     * @returns {any} A stream of the translated key, or an object of translated keys\n     */\n    public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n          .get(key, interpolateParams)\n          .pipe(\n            concat(this.onLangChange.pipe(\n              switchMap((event: LangChangeEvent) => {\n                const res = this.getParsedResult(event.translations, key, interpolateParams);\n                if (typeof res.subscribe === \"function\") {\n                  return res;\n                } else {\n                  return of(res);\n                }\n              })\n            ))\n          );\n    }\n\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param key\n     * @param interpolateParams\n     * @returns {string}\n     */\n    public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param key\n     * @param value\n     * @param lang\n     */\n    public set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Changes the current lang\n     * @param lang\n     */\n    private changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Changes the default lang\n     * @param lang\n     */\n    private changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Allows to reload the lang file from the file\n     * @param lang\n     * @returns {Observable<any>}\n     */\n    public reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n\n    /**\n     * Deletes inner translation\n     * @param lang\n     */\n    public resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     *\n     * @returns string\n     */\n    public getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     *\n     * @returns string\n     */\n    public getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    public defaultLang: string;\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    public currentLang: string = this.defaultLang;\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    public translations: any = {};\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    public langs: Array<string> = [];\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @param expr\n     * @param params\n     * @returns {string}\n     */\n    abstract interpolate(expr: string | Function, params?: any): string;\n\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @param target\n     * @param key\n     * @returns {string}\n     */\n    abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n    public interpolate(expr: string | Function, params?: any): string {\n        let result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr as string;\n        }\n\n        return result;\n    }\n\n    getValue(target: any, key: string): any {\n        let keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n\n    private interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n\n    private interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n}\n","/* tslint:disable */\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n    target = JSON.parse(JSON.stringify(target));\n    source = JSON.parse(JSON.stringify(source));\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n    abstract compile(value: string, lang: string): string | Function;\n    abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value: string, lang: string): string | Function {\n        return value;\n    }\n\n    compileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\n}\n","import {TranslateService} from \"./translate.service\";\nimport {Injectable} from \"@angular/core\";\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {MissingTranslationHandlerParams} params context for resolving a missing translation\n     * @returns {any} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n    handle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Injectable} from \"@angular/core\";\nimport {of} from \"rxjs/observable/of\";\n\nexport abstract class TranslateLoader {\n    abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of({});\n    }\n}\n"],"names":["TranslateModule","TranslateDirective","TranslatePipe","NgModule","TranslateService","FakeMissingTranslationHandler","TranslateDefaultParser","TranslateFakeCompiler","TranslateFakeLoader","__metadata","ChangeDetectorRef","Pipe","Injectable","__decorate","ElementRef","Directive","Input","Inject","of","concat","switchMap","Observable","toArray","map","merge","take","share","EventEmitter","InjectionToken"],"mappings":"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"}
