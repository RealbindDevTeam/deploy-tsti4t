{"version":3,"file":"core.umd.min.js","sources":["~/@ngx-translate/core/src/util.ts","~/@ngx-translate/core/src/translate.loader.ts","~/@ngx-translate/core/src/missing-translation-handler.ts","~/@ngx-translate/core/src/translate.compiler.ts","~/@ngx-translate/core/src/translate.parser.ts","~/@ngx-translate/core/src/translate.store.ts","~/@ngx-translate/core/src/translate.service.ts","~/@ngx-translate/core/src/translate.directive.ts","~/@ngx-translate/core/src/translate.pipe.ts","~/@ngx-translate/core/index.ts"],"sourcesContent":["/* tslint:disable */\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n    target = JSON.parse(JSON.stringify(target));\n    source = JSON.parse(JSON.stringify(source));\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {Observable} from \"rxjs/Observable\";\nimport {Injectable} from \"@angular/core\";\nimport {of} from \"rxjs/observable/of\";\n\nexport abstract class TranslateLoader {\n    abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of({});\n    }\n}\n","import {TranslateService} from \"./translate.service\";\nimport {Injectable} from \"@angular/core\";\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {MissingTranslationHandlerParams} params context for resolving a missing translation\n     * @returns {any} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n    handle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n    abstract compile(value: string, lang: string): string | Function;\n    abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value: string, lang: string): string | Function {\n        return value;\n    }\n\n    compileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @param expr\n     * @param params\n     * @returns {string}\n     */\n    abstract interpolate(expr: string | Function, params?: any): string;\n\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @param target\n     * @param key\n     * @returns {string}\n     */\n    abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n    public interpolate(expr: string | Function, params?: any): string {\n        let result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr as string;\n        }\n\n        return result;\n    }\n\n    getValue(target: any, key: string): any {\n        let keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n\n    private interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n\n    private interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    public defaultLang: string;\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    public currentLang: string = this.defaultLang;\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    public translations: any = {};\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    public langs: Array<string> = [];\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport {concat, share, map, merge, switchMap, toArray, take} from \"rxjs/operators\"\nimport {of} from \"rxjs/observable/of\";\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams\n} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n    private loadingTranslations: Observable<any>;\n    private pending: boolean = false;\n    private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n    private _defaultLang: string;\n    private _currentLang: string;\n    private _langs: Array<string> = [];\n    private _translations: any = {};\n    private _translationRequests: any  = {};\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    get onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n\n    set defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    get currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n\n    set currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    get langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n\n    set langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    get translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n\n    set translations(translations: any) {\n        if(this.isolate) {\n            this._currentLang = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(public store: TranslateStore,\n                public currentLoader: TranslateLoader,\n                public compiler: TranslateCompiler,\n                public parser: TranslateParser,\n                public missingTranslationHandler: MissingTranslationHandler,\n                @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n                @Inject(USE_STORE) private isolate: boolean = false) {\n    }\n\n    /**\n     * Sets the default language to use as a fallback\n     * @param lang\n     */\n    public setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Gets the default language used\n     * @returns string\n     */\n    public getDefaultLang(): string {\n        return this.defaultLang;\n    }\n\n    /**\n     * Changes the lang currently used\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return of(this.translations[lang]);\n        }\n    }\n\n    /**\n     * Retrieves the given translations\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    private retrieveTranslations(lang: string): Observable<any> {\n        let pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n        this.loadingTranslations.pipe(take(1))\n          .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param lang\n     * @param translations\n     * @param shouldMerge\n     */\n    public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Returns an array of currently available langs\n     * @returns {any}\n     */\n    public getLangs(): Array<string> {\n        return this.langs;\n    }\n\n    /**\n     * @param langs\n     * Add available langs\n     */\n    public addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n\n    /**\n     * Update the list of available langs\n     */\n    private updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n\n    /**\n     * Returns the parsed result of the translations\n     * @param translations\n     * @param key\n     * @param interpolateParams\n     * @returns {any}\n     */\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let result: any = {},\n                observables: boolean = false;\n            for(let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let mergedObs: Observable<string>;\n                for(let k of key) {\n                    let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.pipe(merge(obs));\n                    }\n                }\n                return mergedObs.pipe(\n                  toArray(),\n                  map((arr: Array<string>) => {\n                    let obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                      obj[key[index]] = value;\n                    });\n                    return obj;\n                  })\n                );\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param key\n     * @param interpolateParams\n     * @returns {any} the translated key, or an object of translated keys\n     */\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(res, key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return of(res);\n            }\n        }\n    }\n\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param key\n     * @param interpolateParams\n     * @returns {any} A stream of the translated key, or an object of translated keys\n     */\n    public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n          .get(key, interpolateParams)\n          .pipe(\n            concat(this.onLangChange.pipe(\n              switchMap((event: LangChangeEvent) => {\n                const res = this.getParsedResult(event.translations, key, interpolateParams);\n                if (typeof res.subscribe === \"function\") {\n                  return res;\n                } else {\n                  return of(res);\n                }\n              })\n            ))\n          );\n    }\n\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param key\n     * @param interpolateParams\n     * @returns {string}\n     */\n    public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param key\n     * @param value\n     * @param lang\n     */\n    public set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Changes the current lang\n     * @param lang\n     */\n    private changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Changes the default lang\n     * @param lang\n     */\n    private changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Allows to reload the lang file from the file\n     * @param lang\n     * @returns {Observable<any>}\n     */\n    public reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n\n    /**\n     * Deletes inner translation\n     * @param lang\n     */\n    public resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     *\n     * @returns string\n     */\n    public getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     *\n     * @returns string\n     */\n    public getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\n}\n","import {Directive, ElementRef, AfterViewChecked, Input, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {equals, isDefined} from './util';\nimport {TranslateService, LangChangeEvent} from './translate.service';\nimport {TranslationChangeEvent} from \"./translate.service\";\nimport {DefaultLangChangeEvent} from \"./translate.service\";\n\n@Directive({\n    selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n    key: string;\n    lastParams: any;\n    currentParams: any;\n    onLangChangeSub: Subscription;\n    onDefaultLangChangeSub: Subscription;\n    onTranslationChangeSub: Subscription;\n\n    @Input() set translate(key: string) {\n        if(key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n\n    @Input() set translateParams(params: any) {\n        if(!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n\n    constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if(!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n\n    checkNodes(forceUpdate = false, translations?: any) {\n        let nodes: NodeList = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if(!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for(let i = 0; i < nodes.length; ++i) {\n            let node: any = nodes[i];\n            if(node.nodeType === 3) { // node type 3 is a text node\n                let key: string;\n                if(this.key) {\n                    key = this.key;\n                    if(forceUpdate) {\n                        node.lastKey = null;\n                    }\n                } else {\n                    let content = this.getContent(node).trim();\n                    if(content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if(content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        } else if(node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n\n    updateValue(key: string, node: any, translations: any) {\n        if(key) {\n            if(node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n\n            this.lastParams = this.currentParams;\n\n            let onTranslation = (res: string) => {\n                if(res !== key) {\n                    node.lastKey = key;\n                }\n                if(!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n\n            if(isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if(typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                } else {\n                    onTranslation(res);\n                }\n            } else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n\n    getContent(node: any): string {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n\n    setContent(node: any, content: string): void {\n        if(isDefined(node.textContent)) {\n            node.textContent = content;\n        } else {\n            node.data = content;\n        }\n    }\n\n    ngOnDestroy() {\n        if(this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n\n        if(this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n\n        if(this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\n","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n    constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n    }\n\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n\n    transform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch(e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     */\n    _dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._dispose();\n    }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./src/translate.loader\";\nimport {TranslateService} from \"./src/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./src/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./src/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./src/translate.compiler\";\nimport {TranslateDirective} from \"./src/translate.directive\";\nimport {TranslatePipe} from \"./src/translate.pipe\";\nimport {TranslateStore} from \"./src/translate.store\";\nimport {USE_STORE} from \"./src/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./src/translate.service\";\n\nexport * from \"./src/translate.loader\";\nexport * from \"./src/translate.service\";\nexport * from \"./src/missing-translation-handler\";\nexport * from \"./src/translate.parser\";\nexport * from \"./src/translate.compiler\";\nexport * from \"./src/translate.directive\";\nexport * from \"./src/translate.pipe\";\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipe,\n        TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        TranslateDirective\n    ]\n})\nexport class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n}\n"],"names":["equals","o1","o2","length","key","keySet","t1","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","JSON","parse","stringify","output","assign","keys","forEach","_a","_b","TranslateLoader","exports","TranslateFakeLoader","_super","__extends","prototype","getTranslation","lang","of","__decorate","Injectable","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","TranslateParser","TranslateDefaultParser","_this","apply","this","arguments","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","getValue","split","shift","undefined","fn","replace","substring","b","r","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","USE_STORE","InjectionToken","USE_DEFAULT_LANG","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","defineProperty","get","_defaultLang","set","_currentLang","setDefaultLang","retrieveTranslations","pipe","take","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","share","updateLangs","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","result","observables","_i","key_1","k","mergedObs","key_2","obs","merge","toArray","map","arr","obj","index","translateService","Error","Observable","observer","onComplete","next","complete","onError","error","stream","concat","switchMap","event","instant","obj_1","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","__param","Inject","__metadata","Boolean","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","content","getContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","Input","Directive","selector","ElementRef","ChangeDetectorRef","TranslatePipe","translate","transform","query","args","validArgs","e","SyntaxError","_dispose","Pipe","name","pure","TranslateModule","TranslateModule_1","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","NgModule","declarations"],"mappings":"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"}
