{"version":3,"sources":["meteor://ðŸ’»app/packages/barbatus:typescript-compiler/logger.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/file-utils.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/typescript-compiler.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/typescript.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/utils.js"],"names":["util","Npm","require","Logger_","llevel","process","env","TYPESCRIPT_LOG","newProfiler","name","profiler","Profiler","isProfile","start","log","msg","args","console","apply","concat","debug","isDebug","assert","isAssert","Logger","time","format","_started","end","timeEnd","module","export","isBare","isMainConfig","isConfig","isServerConfig","isDeclaration","isWeb","getExtendedPath","getES6ModuleName","WarnMixin","extendFiles","colors","inputFile","fileOptions","getFileOptions","bare","filePath","getPathInPackage","test","TypeScript","isDeclarationFile","getBasename","arch","getArch","packageName","getPackageName","replace","inputFilePath","extended","removeTsExt","warn","error","sourcePath","line","column","message","logError","red","inputFiles","fileMixin","forEach","_","defaults","watch","v","getShallowHash","async","path","fs","Future","TSBuild","validateTsConfig","getExcludeRegExp","createHash","defExclude","RegExp","exlWebRegExp","exlMainRegExp","COMPILER_REGEXP","TypeScriptCompiler","extraOptions","maxParallelism","validateExtraOptions","serverOptions","tsconfig","getDefaultOptions","cfgHash","diagHash","Set","archSet","getFilesToProcess","pexclude","_filterByDefault","_processConfig","_filterByConfig","length","_filterByArch","getBuildOptions","compilerOptions","Object","assign","typings","useCache","processFilesForTarget","getDepsContent","options","pcompile","filePaths","map","file","pbuild","defaultGet","_getContentGetter","getContent","tsBuild","pfiles","future","compileFiles","filter","throwSyntax","results","Map","eachLimit","done","co","pemit","result","emit","set","_processDiagnostics","diagnostics","resolver","wait","_addJavaScript","filesMap","index","get","undefined","filePathNoRootSlash","getContentsAsString","tsResult","forceBare","source","inputPath","outputPath","toBeAdded","data","code","hash","sourceMap","addJavaScript","tsOptions","reduce","diagnostic","cb","dob","add","shown","keys","key","has","syntacticErrors","semanticErrors","_getFileModuleName","getSourceHash","_parseConfig","target","lib","cfgContent","JSON","parse","err","Error","exclude","regExp","resultFiles","check","String","filterRegExp","meteorTS","validateOptions","validateAndConvertOptions","compile","setCacheDir","cacheDir","ob","sort","update","digest"],"mappings":"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","file":"/packages/barbatus_typescript-compiler.js","sourcesContent":["const util = Npm.require('util');\n\nclass Logger_ {\n  constructor() {\n    this.llevel = process.env.TYPESCRIPT_LOG;\n  }\n\n  newProfiler(name) {\n    let profiler = new Profiler(name);\n    if (this.isProfile) profiler.start();\n    return profiler;\n  }\n\n  get isDebug() {\n    return this.llevel >= 2;\n  }\n\n  get isProfile() {\n    return this.llevel >= 3;\n  }\n\n  get isAssert() {\n    return this.llevel >= 4;\n  }\n\n  log(msg, ...args) {\n    if (this.llevel >= 1) {\n      console.log.apply(null, [msg].concat(args));\n    }\n  }\n\n  debug(msg, ...args) {\n    if (this.isDebug) {\n      this.log.apply(this, msg, args);\n    }\n  }\n\n  assert(msg, ...args) {\n    if (this.isAssert) {\n      this.log.apply(this, msg, args);\n    }\n  }\n};\n\nLogger = new Logger_();\n\nclass Profiler {\n  constructor(name) {\n    this.name = name;\n  }\n\n  start() {\n    console.log('%s started', this.name);\n    console.time(util.format('%s time', this.name));\n    this._started = true;\n  }\n\n  end() {\n    if (this._started) {\n      console.timeEnd(util.format('%s time', this.name));\n    }\n  }\n}\n","const colors = Npm.require('colors');\n\nexport function isBare(inputFile) {\n  const fileOptions = inputFile.getFileOptions();\n  return fileOptions && fileOptions.bare;\n}\n\n// Gets root app tsconfig.\nexport function isMainConfig(inputFile) {\n  if (! isWeb(inputFile)) return false;\n\n  const filePath = inputFile.getPathInPackage();\n  return /^tsconfig\\.json$/.test(filePath);\n}\n\nexport function isConfig(inputFile) {\n  const filePath = inputFile.getPathInPackage();\n  return /tsconfig\\.json$/.test(filePath);\n}\n\n// Gets server tsconfig.\nexport function isServerConfig(inputFile) {\n  if (isWeb(inputFile)) return false;\n\n  const filePath = inputFile.getPathInPackage();\n  return /^server\\/tsconfig\\.json$/.test(filePath);\n}\n\n// Checks if it's .d.ts-file.\nexport function isDeclaration(inputFile) {\n  return TypeScript.isDeclarationFile(inputFile.getBasename());\n}\n\nexport function isWeb(inputFile) {\n  const arch = inputFile.getArch();\n  return /^web/.test(arch);\n}\n\n// Gets path with package prefix if any.\nexport function getExtendedPath(inputFile) {\n  let packageName = inputFile.getPackageName();\n  packageName = packageName ?\n    (packageName.replace(':', '_') + '/') : '';\n  const inputFilePath = inputFile.getPathInPackage();\n  return packageName + inputFilePath;\n}\n\nexport function getES6ModuleName(inputFile) {\n  const extended = getExtendedPath(inputFile);\n  return TypeScript.removeTsExt(extended);\n}\n\nexport const WarnMixin = {\n  warn(error) {\n    console.log(`${error.sourcePath} (${error.line}, ${error.column}): ${error.message}`);\n  },\n  logError(error) {\n    console.log(colors.red(\n      `${error.sourcePath} (${error.line}, ${error.column}): ${error.message}`));\n  }\n}\n\nexport function extendFiles(inputFiles, fileMixin) {\n  inputFiles.forEach(inputFile => _.defaults(inputFile, fileMixin));\n}\n","const async = Npm.require('async');\nconst path = Npm.require('path');\nconst fs = Npm.require('fs');\nconst Future = Npm.require('fibers/future');\n\nconst {\n  TSBuild,\n  validateTsConfig,\n  getExcludeRegExp,\n} = Npm.require('meteor-typescript');\n\nconst {createHash} = Npm.require('crypto');\n\nimport {\n  getExtendedPath,\n  isDeclaration,\n  isConfig,\n  isMainConfig,\n  isServerConfig,\n  isBare,\n  getES6ModuleName,\n  WarnMixin,\n  extendFiles,\n  isWeb,\n} from './file-utils';\n\nimport {\n  getShallowHash,\n} from './utils';\n\n// Default exclude paths.\nconst defExclude = new RegExp(\n  getExcludeRegExp(['node_modules/**']));\n\n// What to exclude when compiling for the server.\n// typings/main and typings/browser seem to be not used\n// at all but let keep them for just in case.\nconst exlWebRegExp = new RegExp(\n  getExcludeRegExp(['typings/main/**', 'typings/main.d.ts']));\n\n// What to exclude when compiling for the client.\nconst exlMainRegExp = new RegExp(\n  getExcludeRegExp(['typings/browser/**', 'typings/browser.d.ts']));\n\nconst COMPILER_REGEXP = /(\\.d.ts|\\.ts|\\.tsx|\\.tsconfig)$/;\n\nTypeScriptCompiler = class TypeScriptCompiler {\n  constructor(extraOptions, maxParallelism) {\n    TypeScript.validateExtraOptions(extraOptions);\n\n    this.extraOptions = extraOptions;\n    this.maxParallelism = maxParallelism || 10;\n    this.serverOptions = null;\n    this.tsconfig = TypeScript.getDefaultOptions();\n    this.cfgHash = null;\n    this.diagHash = new Set;\n    this.archSet = new Set;\n  }\n\n  getFilesToProcess(inputFiles) {\n    const pexclude = Logger.newProfiler('exclude');\n\n    inputFiles = this._filterByDefault(inputFiles);\n\n    this._processConfig(inputFiles);\n\n    inputFiles = this._filterByConfig(inputFiles);\n\n    if (inputFiles.length) {\n      const arch = inputFiles[0].getArch();\n      inputFiles = this._filterByArch(inputFiles, arch);\n    }\n\n    pexclude.end();\n\n    return inputFiles;\n  }\n\n  getBuildOptions(inputFiles) {\n    this._processConfig(inputFiles);\n\n    const inputFile = inputFiles[0];\n    let { compilerOptions } = this.tsconfig;\n    // Make a copy.\n    compilerOptions = Object.assign({}, compilerOptions);\n    if (! isWeb(inputFile) && this.serverOptions) {\n      Object.assign(compilerOptions, this.serverOptions);\n    }\n\n    // Apply extra options.\n    if (this.extraOptions) {\n      Object.assign(compilerOptions, this.extraOptions);\n    }\n\n    const arch = inputFile.getArch();\n    const { typings, useCache } = this.tsconfig;\n    return { arch, compilerOptions, typings, useCache };\n  }\n\n  processFilesForTarget(inputFiles, getDepsContent) {\n    extendFiles(inputFiles, WarnMixin);\n\n    const options = this.getBuildOptions(inputFiles);\n    Logger.log('compiler options: %j', options.compilerOptions);\n\n    inputFiles = this.getFilesToProcess(inputFiles);\n\n    if (! inputFiles.length) return;\n\n    const pcompile = Logger.newProfiler('compilation');\n    const filePaths = inputFiles.map(file => getExtendedPath(file));\n    Logger.log('compile files: %s', filePaths);\n\n    const pbuild = Logger.newProfiler('tsBuild');\n    const defaultGet = this._getContentGetter(inputFiles);\n    const getContent = filePath =>\n      (getDepsContent && getDepsContent(filePath)) || defaultGet(filePath);\n    const tsBuild = new TSBuild(filePaths, getContent, options);\n    pbuild.end();\n\n    const pfiles = Logger.newProfiler('tsEmitFiles');\n    const future = new Future;\n    // Don't emit typings.\n    const compileFiles = inputFiles.filter(file => ! isDeclaration(file));\n    let throwSyntax = false;\n    const results = new Map();\n    async.eachLimit(compileFiles, this.maxParallelism, (file, done) => {\n      const co = options.compilerOptions;\n\n      const filePath = getExtendedPath(file);\n      const pemit = Logger.newProfiler('tsEmit');\n      const result = tsBuild.emit(filePath);\n      results.set(file, result);\n      pemit.end();\n\n      throwSyntax = throwSyntax | \n        this._processDiagnostics(file, result.diagnostics, co);\n\n      done();\n    }, future.resolver());\n\n    pfiles.end();\n\n    future.wait();\n\n    if (! throwSyntax) {\n      results.forEach((result, file) => {\n        const module = options.compilerOptions.module;\n        this._addJavaScript(file, result, module === 'none');\n      });\n    }\n\n    pcompile.end();\n  }\n\n  _getContentGetter(inputFiles) {\n    const filesMap = new Map;\n    inputFiles.forEach((inputFile, index) => {\n      filesMap.set(getExtendedPath(inputFile), index);\n    });\n\n    return filePath => {\n      let index = filesMap.get(filePath);\n      if (index === undefined) {\n        const filePathNoRootSlash = filePath.replace(/^\\//, '');\n        index = filesMap.get(filePathNoRootSlash);\n      }\n      return index !== undefined ?\n        inputFiles[index].getContentsAsString() : null;\n    };\n  }\n\n  _addJavaScript(inputFile, tsResult, forceBare) {\n    const source = inputFile.getContentsAsString();\n    const inputPath = inputFile.getPathInPackage();\n    const outputPath = TypeScript.removeTsExt(inputPath) + '.js';\n    const toBeAdded = {\n      sourcePath: inputPath,\n      path: outputPath,\n      data: tsResult.code,\n      hash: tsResult.hash,\n      sourceMap: tsResult.sourceMap,\n      bare: forceBare || isBare(inputFile)\n    };\n    inputFile.addJavaScript(toBeAdded);\n  }\n\n  _processDiagnostics(inputFile, diagnostics, tsOptions) {\n    // Remove duplicated warnings for shared files\n    // by saving hashes of already shown warnings.\n    const reduce = (diagnostic, cb) => {\n      let dob = {\n        message: diagnostic.message,\n        sourcePath: getExtendedPath(inputFile),\n        line: diagnostic.line,\n        column: diagnostic.column\n      };\n      const arch = inputFile.getArch();\n      // TODO: find out how to get list of architectures.\n      this.archSet.add(arch);\n\n      let shown = false;\n      for (const key of this.archSet.keys()) {\n        if (key !== arch) {\n          dob.arch = key;\n          const hash = getShallowHash(dob);\n          if (this.diagHash.has(hash)) {\n            shown = true; break;\n          }\n        }\n      }\n\n      if (! shown) {\n        dob.arch = arch;\n        const hash = getShallowHash(dob);\n        this.diagHash.add(hash);\n        cb(dob);\n      }\n    }\n\n    // Always throw syntax errors.\n    const throwSyntax = !! diagnostics.syntacticErrors.length;\n    diagnostics.syntacticErrors.forEach(diagnostic => {\n      reduce(diagnostic, dob => {\n        inputFile.error(dob);\n      });\n    });\n\n    const packageName = inputFile.getPackageName();\n    if (packageName) return throwSyntax;\n\n    // And log out other errors except package files.\n    if (tsOptions && tsOptions.diagnostics) {\n      diagnostics.semanticErrors.forEach(diagnostic => {\n        reduce(diagnostic, dob => inputFile.warn(dob));\n      });\n    }\n\n    return throwSyntax;\n  }\n\n  _getFileModuleName(inputFile, options) {\n    if (options.module === 'none') return null;\n\n    return getES6ModuleName(inputFile);\n  }\n\n  _processConfig(inputFiles) {\n    for (const inputFile of inputFiles) {\n      // Parse root config.\n      if (isMainConfig(inputFile)) {\n        const source = inputFile.getContentsAsString();\n        const hash = inputFile.getSourceHash();\n        // If hashes differ, create new tsconfig. \n        if (hash !== this.cfgHash) {\n          this.tsconfig = this._parseConfig(source);\n          this.cfgHash = hash;\n        }\n      }\n\n      // Parse server config.\n      // Take only target and lib values.\n      if (isServerConfig(inputFile)) {\n        const  source = inputFile.getContentsAsString();\n        const { compilerOptions } = this._parseConfig(source);\n        if (compilerOptions) {\n          const { target, lib } = compilerOptions;\n          this.serverOptions = { target, lib };\n        }\n      }\n    }\n  }\n\n  _parseConfig(cfgContent) {\n    let tsconfig = null;\n\n    try {\n      tsconfig = JSON.parse(cfgContent);\n\n      validateTsConfig(tsconfig);\n    } catch(err) {\n      throw new Error(`Format of the tsconfig is invalid: ${err}`);\n    }\n\n    const exclude = tsconfig.exclude || [];\n    try {\n      const regExp = getExcludeRegExp(exclude);\n      tsconfig.exclude = regExp && new RegExp(regExp);\n    } catch(err) {\n      throw new Error(`Format of an exclude path is invalid: ${err}`);\n    }\n\n    return tsconfig;\n  }\n\n  _filterByDefault(inputFiles) {\n    inputFiles = inputFiles.filter(inputFile => {\n      const path = inputFile.getPathInPackage();\n      return COMPILER_REGEXP.test(path) && ! defExclude.test('/' + path);\n    });\n    return inputFiles;\n  }\n\n  _filterByConfig(inputFiles) {\n    let resultFiles = inputFiles;\n    if (this.tsconfig.exclude) {\n      resultFiles = resultFiles.filter(inputFile => {\n        const path = inputFile.getPathInPackage();\n        // There seems to an issue with getRegularExpressionForWildcard:\n        // result regexp always starts with /.\n        return ! this.tsconfig.exclude.test('/' + path);\n      });\n    }\n    return resultFiles;\n  }\n\n  _filterByArch(inputFiles, arch) {\n    check(arch, String);\n\n    /**\n     * Include only typings that current arch needs,\n     * typings/main is for the server only and\n     * typings/browser - for the client.\n     */\n    const filterRegExp = /^web/.test(arch) ? exlWebRegExp : exlMainRegExp;\n    inputFiles = inputFiles.filter(inputFile => {\n      const path = inputFile.getPathInPackage();\n      return ! filterRegExp.test('/' + path);\n    });\n\n    return inputFiles;\n  }\n}\n","const meteorTS = Npm.require('meteor-typescript');\n\nTypeScript = {\n  validateOptions(options) {\n    if (! options) return;\n\n    meteorTS.validateAndConvertOptions(options);\n  },\n\n  // Extra options are the same compiler options\n  // but passed in the compiler constructor.\n  validateExtraOptions(options) {\n    if (! options) return;\n\n    meteorTS.validateAndConvertOptions({\n      compilerOptions: options\n    });\n  },\n\n  getDefaultOptions: meteorTS.getDefaultOptions,\n\n  compile(source, options) {\n    options = options || meteorTS.getDefaultOptions();\n    return meteorTS.compile(source, options);\n  },\n\n  setCacheDir(cacheDir) {\n    meteorTS.setCacheDir(cacheDir);\n  },\n\n  isDeclarationFile(filePath) {\n    return /^.*\\.d\\.ts$/.test(filePath);\n  },\n\n  removeTsExt(path) {\n    return path && path.replace(/(\\.tsx|\\.ts)$/g, '');\n  }\n};\n","const {createHash} = Npm.require('crypto');\n\nexport function getShallowHash(ob) {\n  const hash = createHash('sha1');\n  const keys = Object.keys(ob);\n  keys.sort();\n\n  keys.forEach(key => {\n    hash.update(key).update('' + ob[key]);\n  });\n\n  return hash.digest('hex');\n}\n"]}